/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.h
 #	source generated by 4D Plugin Wizard
 #	Project : Event Kit
 #	author : miyako
 #	2017/06/07
 #
 # --------------------------------------------------------------------------------*/

BOOL setDate(NSDate *date, C_DATE &ParamDate, C_TIME &ParamTime);

// --- EK Store
void EK_STORE_Commit(sLONG_PTR *pResult, PackagePtr pParams);

// --- EK Source
void EK_SOURCE_Get_type(sLONG_PTR *pResult, PackagePtr pParams);
void EK_SOURCE_Get_title(sLONG_PTR *pResult, PackagePtr pParams);
void EK_SOURCE_LIST(sLONG_PTR *pResult, PackagePtr pParams);
void EK_SOURCE_Calendar_list(sLONG_PTR *pResult, PackagePtr pParams);

// --- EK Calendar
void EK_CALENDAR_Get_rgb_color(sLONG_PTR *pResult, PackagePtr pParams);
void EK_CALENDAR_Set_rgb_color(sLONG_PTR *pResult, PackagePtr pParams);
void EK_CALENDAR_Remove(sLONG_PTR *pResult, PackagePtr pParams);
void EK_CALENDAR_Save(sLONG_PTR *pResult, PackagePtr pParams);
void EK_CALENDAR_Get_default(sLONG_PTR *pResult, PackagePtr pParams);
void EK_CALENDAR_Get_type(sLONG_PTR *pResult, PackagePtr pParams);
void EK_CALENDAR_LIST(sLONG_PTR *pResult, PackagePtr pParams);
void EK_CALENDAR_Create(sLONG_PTR *pResult, PackagePtr pParams);
void EK_CALENDAR_Get_title(sLONG_PTR *pResult, PackagePtr pParams);
void EK_CALENDAR_Set_title(sLONG_PTR *pResult, PackagePtr pParams);
void EK_CALENDAR_Get_source(sLONG_PTR *pResult, PackagePtr pParams);

// --- EK Object
void EK_OBJECT_ROLLBACK(sLONG_PTR *pResult, PackagePtr pParams);
void EK_OBJECT_RESET(sLONG_PTR *pResult, PackagePtr pParams);
void EK_OBJECT_REFRESH(sLONG_PTR *pResult, PackagePtr pParams);
void EK_OBJECT_Has_changes(sLONG_PTR *pResult, PackagePtr pParams);
void EK_OBJECT_Is_new(sLONG_PTR *pResult, PackagePtr pParams);

// --- EK Item
void EK_ITEM_Get_attendees(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Get_calendar(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Get_title(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Set_title(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Get_location(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Set_location(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Get_url(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Set_url(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Get_notes(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Set_notes(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Get_alarms(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Set_alarms(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Get_rules(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Set_rules(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Get_timezone(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Set_timezone(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Set_calendar(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Get_attendee_names(sLONG_PTR *pResult, PackagePtr pParams);
void EK_ITEM_Get_modification_date(sLONG_PTR *pResult, PackagePtr pParams);

// --- EK Reminder
void EK_REMINDER_Create(sLONG_PTR *pResult, PackagePtr pParams);
void EK_REMINDER_Set_start_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_REMINDER_Get_start_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_REMINDER_Set_due_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_REMINDER_Get_due_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_REMINDER_Set_completed_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_REMINDER_Get_completed_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_REMINDER_Remove(sLONG_PTR *pResult, PackagePtr pParams);
void EK_REMINDER_Save(sLONG_PTR *pResult, PackagePtr pParams);

// --- EK Event
void EK_EVENT_Create(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Set_start_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Get_start_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Set_end_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Get_end_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Get_occurrence_date(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Get_status(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Get_all_day(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Set_all_day(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Get_organizer_name(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Save(sLONG_PTR *pResult, PackagePtr pParams);
void EK_EVENT_Remove(sLONG_PTR *pResult, PackagePtr pParams);

// --- EK Query
void EK_QUERY_EVENT(sLONG_PTR *pResult, PackagePtr pParams);
void EK_QUERY_COMPLETE_REMINDER(sLONG_PTR *pResult, PackagePtr pParams);
void EK_QUERY_INCOMPLETE_REMINDER(sLONG_PTR *pResult, PackagePtr pParams);

BOOL setDate(NSDate *date, C_DATE &ParamDate, C_TIME &ParamTime);
NSDate *copyDate(C_DATE &ParamDate, C_TIME &ParamTime);
void setArray(NSArray *array, ARRAY_TEXT &ParamArray);
NSArray * copyArray(ARRAY_TEXT &ParamArray);


